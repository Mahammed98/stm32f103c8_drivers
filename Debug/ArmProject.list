
ArmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b3c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c48  08000c48  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c48  08000c48  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c48  08000c48  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c48  08000c48  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c48  08000c48  00001c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c4c  08000c4c  00001c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000c50  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000c5c  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000c5c  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ece  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001048  00000000  00000000  00004f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  00005f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000032d  00000000  00000000  000063c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015468  00000000  00000000  000066ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000048f2  00000000  00000000  0001bb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ca91  00000000  00000000  00020447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ced8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f40  00000000  00000000  0009cf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0009de5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c30 	.word	0x08000c30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000c30 	.word	0x08000c30

0800014c <M_EXTI_void_EnableLine>:

static void (*Call_Back_Ptr)(void);
/****************************************************************************************************/
/****************************************************************************************************/
void M_EXTI_void_EnableLine(u8 Local_LineNum)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	__SET_BIT(__EXTIR->EXTI_IMR_REG, Local_LineNum);
 8000156:	4b07      	ldr	r3, [pc, #28]	@ (8000174 <M_EXTI_void_EnableLine+0x28>)
 8000158:	681a      	ldr	r2, [r3, #0]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2101      	movs	r1, #1
 800015e:	fa01 f303 	lsl.w	r3, r1, r3
 8000162:	4904      	ldr	r1, [pc, #16]	@ (8000174 <M_EXTI_void_EnableLine+0x28>)
 8000164:	4313      	orrs	r3, r2
 8000166:	600b      	str	r3, [r1, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	40010400 	.word	0x40010400

08000178 <M_EXTI_void_EventType>:
	M_AFIO_void_SetPin_ALFExt(Local_PortNum, Loca_PinNum);
}
/////////////////////////////////////////////////////////////////////////////////////////////

void M_EXTI_void_EventType(u8 Local_LineNum, u8 Local_EventType)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	460a      	mov	r2, r1
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	4613      	mov	r3, r2
 8000186:	71bb      	strb	r3, [r7, #6]
	switch(Local_EventType)
 8000188:	79bb      	ldrb	r3, [r7, #6]
 800018a:	2b02      	cmp	r3, #2
 800018c:	d02e      	beq.n	80001ec <M_EXTI_void_EventType+0x74>
 800018e:	2b02      	cmp	r3, #2
 8000190:	dc3f      	bgt.n	8000212 <M_EXTI_void_EventType+0x9a>
 8000192:	2b00      	cmp	r3, #0
 8000194:	d002      	beq.n	800019c <M_EXTI_void_EventType+0x24>
 8000196:	2b01      	cmp	r3, #1
 8000198:	d014      	beq.n	80001c4 <M_EXTI_void_EventType+0x4c>
			break;
		case __ON_CHANGING__:
			__SET_BIT(__EXTIR->EXTI_RTSR_REG, Local_LineNum);
			__SET_BIT(__EXTIR->EXTI_FTSR_REG, Local_LineNum);
			break;
		default: break;
 800019a:	e03a      	b.n	8000212 <M_EXTI_void_EventType+0x9a>
			__SET_BIT(__EXTIR->EXTI_RTSR_REG, Local_LineNum);
 800019c:	4b20      	ldr	r3, [pc, #128]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 800019e:	689a      	ldr	r2, [r3, #8]
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2101      	movs	r1, #1
 80001a4:	fa01 f303 	lsl.w	r3, r1, r3
 80001a8:	491d      	ldr	r1, [pc, #116]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001aa:	4313      	orrs	r3, r2
 80001ac:	608b      	str	r3, [r1, #8]
			__CLR_BIT(__EXTIR->EXTI_FTSR_REG, Local_LineNum);
 80001ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001b0:	68da      	ldr	r2, [r3, #12]
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	2101      	movs	r1, #1
 80001b6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ba:	43db      	mvns	r3, r3
 80001bc:	4918      	ldr	r1, [pc, #96]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001be:	4013      	ands	r3, r2
 80001c0:	60cb      	str	r3, [r1, #12]
			break;
 80001c2:	e027      	b.n	8000214 <M_EXTI_void_EventType+0x9c>
			__SET_BIT(__EXTIR->EXTI_FTSR_REG, Local_LineNum);
 80001c4:	4b16      	ldr	r3, [pc, #88]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001c6:	68da      	ldr	r2, [r3, #12]
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	2101      	movs	r1, #1
 80001cc:	fa01 f303 	lsl.w	r3, r1, r3
 80001d0:	4913      	ldr	r1, [pc, #76]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001d2:	4313      	orrs	r3, r2
 80001d4:	60cb      	str	r3, [r1, #12]
			__CLR_BIT(__EXTIR->EXTI_RTSR_REG, Local_LineNum);
 80001d6:	4b12      	ldr	r3, [pc, #72]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001d8:	689a      	ldr	r2, [r3, #8]
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2101      	movs	r1, #1
 80001de:	fa01 f303 	lsl.w	r3, r1, r3
 80001e2:	43db      	mvns	r3, r3
 80001e4:	490e      	ldr	r1, [pc, #56]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001e6:	4013      	ands	r3, r2
 80001e8:	608b      	str	r3, [r1, #8]
			break;
 80001ea:	e013      	b.n	8000214 <M_EXTI_void_EventType+0x9c>
			__SET_BIT(__EXTIR->EXTI_RTSR_REG, Local_LineNum);
 80001ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001ee:	689a      	ldr	r2, [r3, #8]
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	2101      	movs	r1, #1
 80001f4:	fa01 f303 	lsl.w	r3, r1, r3
 80001f8:	4909      	ldr	r1, [pc, #36]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 80001fa:	4313      	orrs	r3, r2
 80001fc:	608b      	str	r3, [r1, #8]
			__SET_BIT(__EXTIR->EXTI_FTSR_REG, Local_LineNum);
 80001fe:	4b08      	ldr	r3, [pc, #32]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 8000200:	68da      	ldr	r2, [r3, #12]
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2101      	movs	r1, #1
 8000206:	fa01 f303 	lsl.w	r3, r1, r3
 800020a:	4905      	ldr	r1, [pc, #20]	@ (8000220 <M_EXTI_void_EventType+0xa8>)
 800020c:	4313      	orrs	r3, r2
 800020e:	60cb      	str	r3, [r1, #12]
			break;
 8000210:	e000      	b.n	8000214 <M_EXTI_void_EventType+0x9c>
		default: break;
 8000212:	bf00      	nop
	}
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40010400 	.word	0x40010400

08000224 <M_EXTI_void_ClearSWT>:
	__SET_BIT(__EXTIR->EXTI_SWIER_REG, Local_LineNum);
}
/////////////////////////////////////////////////////////////////////////////////////////////

void M_EXTI_void_ClearSWT(u8 Local_LineNum)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	__SET_BIT(__EXTIR->EXTI_PR_REG, Local_LineNum);
 800022e:	4b07      	ldr	r3, [pc, #28]	@ (800024c <M_EXTI_void_ClearSWT+0x28>)
 8000230:	695a      	ldr	r2, [r3, #20]
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2101      	movs	r1, #1
 8000236:	fa01 f303 	lsl.w	r3, r1, r3
 800023a:	4904      	ldr	r1, [pc, #16]	@ (800024c <M_EXTI_void_ClearSWT+0x28>)
 800023c:	4313      	orrs	r3, r2
 800023e:	614b      	str	r3, [r1, #20]

}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40010400 	.word	0x40010400

08000250 <M_EXTI_void_SetCallBack>:
////////////////////////////////////// interrupt ///////////////////////////////////////////////////////
void M_EXTI_void_SetCallBack(void(*ptr)(void))
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	Call_Back_Ptr = ptr;
 8000258:	4a03      	ldr	r2, [pc, #12]	@ (8000268 <M_EXTI_void_SetCallBack+0x18>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6013      	str	r3, [r2, #0]

}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000028 	.word	0x20000028

0800026c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	Call_Back_Ptr();
 8000270:	4b02      	ldr	r3, [pc, #8]	@ (800027c <EXTI1_IRQHandler+0x10>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4798      	blx	r3
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000028 	.word	0x20000028

08000280 <M_GPIO_void_SetPinMode>:
#include "GPIO_interface.h"


void M_GPIO_void_SetPinMode(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinMode, u8 Copy_u8IOMode)
{
 8000280:	b490      	push	{r4, r7}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4604      	mov	r4, r0
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4623      	mov	r3, r4
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	4603      	mov	r3, r0
 8000294:	71bb      	strb	r3, [r7, #6]
 8000296:	460b      	mov	r3, r1
 8000298:	717b      	strb	r3, [r7, #5]
 800029a:	4613      	mov	r3, r2
 800029c:	713b      	strb	r3, [r7, #4]
	/*
	 *  first you must reset all pins in GPIOx_CRL and GPIOx_CRH
	 *  Because in CNF[0:1] the default value is 0x01 (floating input)
	 */

    if(Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7)
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	f200 80c5 	bhi.w	8000430 <M_GPIO_void_SetPinMode+0x1b0>
    {
        switch(Copy_u8PortName)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b04      	cmp	r3, #4
 80002aa:	f200 81a1 	bhi.w	80005f0 <M_GPIO_void_SetPinMode+0x370>
 80002ae:	a201      	add	r2, pc, #4	@ (adr r2, 80002b4 <M_GPIO_void_SetPinMode+0x34>)
 80002b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b4:	080002c9 	.word	0x080002c9
 80002b8:	08000311 	.word	0x08000311
 80002bc:	08000359 	.word	0x08000359
 80002c0:	080003a1 	.word	0x080003a1
 80002c4:	080003e9 	.word	0x080003e9
        {
            case PORTA_GPIO:
            	GPIO_A->GPIOx_CRL &= ~(0xf<<(4*Copy_u8PinNumber));
 80002c8:	4b9e      	ldr	r3, [pc, #632]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	79ba      	ldrb	r2, [r7, #6]
 80002ce:	0092      	lsls	r2, r2, #2
 80002d0:	210f      	movs	r1, #15
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	43d2      	mvns	r2, r2
 80002d8:	4611      	mov	r1, r2
 80002da:	4a9a      	ldr	r2, [pc, #616]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 80002dc:	400b      	ands	r3, r1
 80002de:	6013      	str	r3, [r2, #0]
            	GPIO_A->GPIOx_CRL |= (u32)(Copy_u8PinMode << (4*Copy_u8PinNumber));
 80002e0:	4b98      	ldr	r3, [pc, #608]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	7979      	ldrb	r1, [r7, #5]
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	0092      	lsls	r2, r2, #2
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a94      	ldr	r2, [pc, #592]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 80002f2:	430b      	orrs	r3, r1
 80002f4:	6013      	str	r3, [r2, #0]
            	GPIO_A->GPIOx_CRL |= (u32)(Copy_u8IOMode << (2+(4*Copy_u8PinNumber)));
 80002f6:	4b93      	ldr	r3, [pc, #588]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	7939      	ldrb	r1, [r7, #4]
 80002fc:	79ba      	ldrb	r2, [r7, #6]
 80002fe:	0092      	lsls	r2, r2, #2
 8000300:	3202      	adds	r2, #2
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	4611      	mov	r1, r2
 8000308:	4a8e      	ldr	r2, [pc, #568]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 800030a:	430b      	orrs	r3, r1
 800030c:	6013      	str	r3, [r2, #0]
                break;
 800030e:	e172      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            case PORTB_GPIO:
            	GPIO_B->GPIOx_CRL &= ~(0xf<<(4*Copy_u8PinNumber));
 8000310:	4b8d      	ldr	r3, [pc, #564]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	79ba      	ldrb	r2, [r7, #6]
 8000316:	0092      	lsls	r2, r2, #2
 8000318:	210f      	movs	r1, #15
 800031a:	fa01 f202 	lsl.w	r2, r1, r2
 800031e:	43d2      	mvns	r2, r2
 8000320:	4611      	mov	r1, r2
 8000322:	4a89      	ldr	r2, [pc, #548]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 8000324:	400b      	ands	r3, r1
 8000326:	6013      	str	r3, [r2, #0]
                GPIO_B->GPIOx_CRL |= (u32)(Copy_u8PinMode << (4*Copy_u8PinNumber));
 8000328:	4b87      	ldr	r3, [pc, #540]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	7979      	ldrb	r1, [r7, #5]
 800032e:	79ba      	ldrb	r2, [r7, #6]
 8000330:	0092      	lsls	r2, r2, #2
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	4611      	mov	r1, r2
 8000338:	4a83      	ldr	r2, [pc, #524]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 800033a:	430b      	orrs	r3, r1
 800033c:	6013      	str	r3, [r2, #0]
                GPIO_B->GPIOx_CRL |= (u32)(Copy_u8IOMode << (2+(4*Copy_u8PinNumber)));
 800033e:	4b82      	ldr	r3, [pc, #520]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	7939      	ldrb	r1, [r7, #4]
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	0092      	lsls	r2, r2, #2
 8000348:	3202      	adds	r2, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a7d      	ldr	r2, [pc, #500]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
                break;
 8000356:	e14e      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            case PORTC_GPIO:
            	GPIO_C->GPIOx_CRL &= ~(0xf<<(4*Copy_u8PinNumber));
 8000358:	4b7c      	ldr	r3, [pc, #496]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	79ba      	ldrb	r2, [r7, #6]
 800035e:	0092      	lsls	r2, r2, #2
 8000360:	210f      	movs	r1, #15
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	43d2      	mvns	r2, r2
 8000368:	4611      	mov	r1, r2
 800036a:	4a78      	ldr	r2, [pc, #480]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 800036c:	400b      	ands	r3, r1
 800036e:	6013      	str	r3, [r2, #0]
                GPIO_C->GPIOx_CRL |= (u32)(Copy_u8PinMode << (4*Copy_u8PinNumber));
 8000370:	4b76      	ldr	r3, [pc, #472]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	7979      	ldrb	r1, [r7, #5]
 8000376:	79ba      	ldrb	r2, [r7, #6]
 8000378:	0092      	lsls	r2, r2, #2
 800037a:	fa01 f202 	lsl.w	r2, r1, r2
 800037e:	4611      	mov	r1, r2
 8000380:	4a72      	ldr	r2, [pc, #456]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 8000382:	430b      	orrs	r3, r1
 8000384:	6013      	str	r3, [r2, #0]
                GPIO_C->GPIOx_CRL |= (u32)(Copy_u8IOMode << (2+(4*Copy_u8PinNumber)));
 8000386:	4b71      	ldr	r3, [pc, #452]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	7939      	ldrb	r1, [r7, #4]
 800038c:	79ba      	ldrb	r2, [r7, #6]
 800038e:	0092      	lsls	r2, r2, #2
 8000390:	3202      	adds	r2, #2
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	4611      	mov	r1, r2
 8000398:	4a6c      	ldr	r2, [pc, #432]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 800039a:	430b      	orrs	r3, r1
 800039c:	6013      	str	r3, [r2, #0]
                break;
 800039e:	e12a      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            case PORTD_GPIO:
            	GPIO_D->GPIOx_CRL &= ~(0xf<<(4*Copy_u8PinNumber));
 80003a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000550 <M_GPIO_void_SetPinMode+0x2d0>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	79ba      	ldrb	r2, [r7, #6]
 80003a6:	0092      	lsls	r2, r2, #2
 80003a8:	210f      	movs	r1, #15
 80003aa:	fa01 f202 	lsl.w	r2, r1, r2
 80003ae:	43d2      	mvns	r2, r2
 80003b0:	4611      	mov	r1, r2
 80003b2:	4a67      	ldr	r2, [pc, #412]	@ (8000550 <M_GPIO_void_SetPinMode+0x2d0>)
 80003b4:	400b      	ands	r3, r1
 80003b6:	6013      	str	r3, [r2, #0]
                GPIO_D->GPIOx_CRL |= (u32)(Copy_u8PinMode << (4*Copy_u8PinNumber));
 80003b8:	4b65      	ldr	r3, [pc, #404]	@ (8000550 <M_GPIO_void_SetPinMode+0x2d0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	7979      	ldrb	r1, [r7, #5]
 80003be:	79ba      	ldrb	r2, [r7, #6]
 80003c0:	0092      	lsls	r2, r2, #2
 80003c2:	fa01 f202 	lsl.w	r2, r1, r2
 80003c6:	4611      	mov	r1, r2
 80003c8:	4a61      	ldr	r2, [pc, #388]	@ (8000550 <M_GPIO_void_SetPinMode+0x2d0>)
 80003ca:	430b      	orrs	r3, r1
 80003cc:	6013      	str	r3, [r2, #0]
                GPIO_D->GPIOx_CRL |= (u32)(Copy_u8IOMode << (2+(4*Copy_u8PinNumber)));
 80003ce:	4b60      	ldr	r3, [pc, #384]	@ (8000550 <M_GPIO_void_SetPinMode+0x2d0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	7939      	ldrb	r1, [r7, #4]
 80003d4:	79ba      	ldrb	r2, [r7, #6]
 80003d6:	0092      	lsls	r2, r2, #2
 80003d8:	3202      	adds	r2, #2
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a5b      	ldr	r2, [pc, #364]	@ (8000550 <M_GPIO_void_SetPinMode+0x2d0>)
 80003e2:	430b      	orrs	r3, r1
 80003e4:	6013      	str	r3, [r2, #0]
                break;
 80003e6:	e106      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            case PORTE_GPIO:
            	GPIO_E->GPIOx_CRL &= ~(0xf<<(4*Copy_u8PinNumber));
 80003e8:	4b5a      	ldr	r3, [pc, #360]	@ (8000554 <M_GPIO_void_SetPinMode+0x2d4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	79ba      	ldrb	r2, [r7, #6]
 80003ee:	0092      	lsls	r2, r2, #2
 80003f0:	210f      	movs	r1, #15
 80003f2:	fa01 f202 	lsl.w	r2, r1, r2
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a56      	ldr	r2, [pc, #344]	@ (8000554 <M_GPIO_void_SetPinMode+0x2d4>)
 80003fc:	400b      	ands	r3, r1
 80003fe:	6013      	str	r3, [r2, #0]
                GPIO_E->GPIOx_CRL |= (u32)(Copy_u8PinMode << (4*Copy_u8PinNumber));
 8000400:	4b54      	ldr	r3, [pc, #336]	@ (8000554 <M_GPIO_void_SetPinMode+0x2d4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	7979      	ldrb	r1, [r7, #5]
 8000406:	79ba      	ldrb	r2, [r7, #6]
 8000408:	0092      	lsls	r2, r2, #2
 800040a:	fa01 f202 	lsl.w	r2, r1, r2
 800040e:	4611      	mov	r1, r2
 8000410:	4a50      	ldr	r2, [pc, #320]	@ (8000554 <M_GPIO_void_SetPinMode+0x2d4>)
 8000412:	430b      	orrs	r3, r1
 8000414:	6013      	str	r3, [r2, #0]
                GPIO_E->GPIOx_CRL |= (u32)(Copy_u8IOMode << (2+(4*Copy_u8PinNumber)));
 8000416:	4b4f      	ldr	r3, [pc, #316]	@ (8000554 <M_GPIO_void_SetPinMode+0x2d4>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	7939      	ldrb	r1, [r7, #4]
 800041c:	79ba      	ldrb	r2, [r7, #6]
 800041e:	0092      	lsls	r2, r2, #2
 8000420:	3202      	adds	r2, #2
 8000422:	fa01 f202 	lsl.w	r2, r1, r2
 8000426:	4611      	mov	r1, r2
 8000428:	4a4a      	ldr	r2, [pc, #296]	@ (8000554 <M_GPIO_void_SetPinMode+0x2d4>)
 800042a:	430b      	orrs	r3, r1
 800042c:	6013      	str	r3, [r2, #0]
                break;
 800042e:	e0e2      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            default:
                break;
        }
    }
    else if(Copy_u8PinNumber >= 8 && Copy_u8PinNumber <= 15)
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	2b07      	cmp	r3, #7
 8000434:	f240 80df 	bls.w	80005f6 <M_GPIO_void_SetPinMode+0x376>
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2b0f      	cmp	r3, #15
 800043c:	f200 80db 	bhi.w	80005f6 <M_GPIO_void_SetPinMode+0x376>
    {
        switch(Copy_u8PortName)
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	2b04      	cmp	r3, #4
 8000444:	f200 80d6 	bhi.w	80005f4 <M_GPIO_void_SetPinMode+0x374>
 8000448:	a201      	add	r2, pc, #4	@ (adr r2, 8000450 <M_GPIO_void_SetPinMode+0x1d0>)
 800044a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044e:	bf00      	nop
 8000450:	08000465 	.word	0x08000465
 8000454:	080004ad 	.word	0x080004ad
 8000458:	080004f9 	.word	0x080004f9
 800045c:	08000559 	.word	0x08000559
 8000460:	080005a5 	.word	0x080005a5
        {
            case PORTA_GPIO:
            	GPIO_A->GPIOx_CRH &= ~(0xf<<(4*Copy_u8PinNumber));
 8000464:	4b37      	ldr	r3, [pc, #220]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	79ba      	ldrb	r2, [r7, #6]
 800046a:	0092      	lsls	r2, r2, #2
 800046c:	210f      	movs	r1, #15
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	43d2      	mvns	r2, r2
 8000474:	4611      	mov	r1, r2
 8000476:	4a33      	ldr	r2, [pc, #204]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 8000478:	400b      	ands	r3, r1
 800047a:	6053      	str	r3, [r2, #4]
            	GPIO_A->GPIOx_CRH |= (u32)(Copy_u8PinMode << (4*Copy_u8PinNumber));
 800047c:	4b31      	ldr	r3, [pc, #196]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	7979      	ldrb	r1, [r7, #5]
 8000482:	79ba      	ldrb	r2, [r7, #6]
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a2d      	ldr	r2, [pc, #180]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 800048e:	430b      	orrs	r3, r1
 8000490:	6053      	str	r3, [r2, #4]
            	GPIO_A->GPIOx_CRH |= (u32)(Copy_u8IOMode << (2+(4*Copy_u8PinNumber)));
 8000492:	4b2c      	ldr	r3, [pc, #176]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	7939      	ldrb	r1, [r7, #4]
 8000498:	79ba      	ldrb	r2, [r7, #6]
 800049a:	0092      	lsls	r2, r2, #2
 800049c:	3202      	adds	r2, #2
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a27      	ldr	r2, [pc, #156]	@ (8000544 <M_GPIO_void_SetPinMode+0x2c4>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6053      	str	r3, [r2, #4]
                break;
 80004aa:	e0a4      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            case PORTB_GPIO:
            	GPIO_B->GPIOx_CRH &= ~(0xf<<(4*Copy_u8PinNumber));
 80004ac:	4b26      	ldr	r3, [pc, #152]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	79ba      	ldrb	r2, [r7, #6]
 80004b2:	0092      	lsls	r2, r2, #2
 80004b4:	210f      	movs	r1, #15
 80004b6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ba:	43d2      	mvns	r2, r2
 80004bc:	4611      	mov	r1, r2
 80004be:	4a22      	ldr	r2, [pc, #136]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 80004c0:	400b      	ands	r3, r1
 80004c2:	6053      	str	r3, [r2, #4]
                GPIO_B->GPIOx_CRH |= (u32)(Copy_u8PinMode << (4*(Copy_u8PinNumber-8)));
 80004c4:	4b20      	ldr	r3, [pc, #128]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	7979      	ldrb	r1, [r7, #5]
 80004ca:	79ba      	ldrb	r2, [r7, #6]
 80004cc:	3a08      	subs	r2, #8
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	fa01 f202 	lsl.w	r2, r1, r2
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 80004d8:	430b      	orrs	r3, r1
 80004da:	6053      	str	r3, [r2, #4]
                GPIO_B->GPIOx_CRH |= (u32)(Copy_u8IOMode << (2+(4*(Copy_u8PinNumber-8))));
 80004dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	7939      	ldrb	r1, [r7, #4]
 80004e2:	79ba      	ldrb	r2, [r7, #6]
 80004e4:	3a08      	subs	r2, #8
 80004e6:	0092      	lsls	r2, r2, #2
 80004e8:	3202      	adds	r2, #2
 80004ea:	fa01 f202 	lsl.w	r2, r1, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a15      	ldr	r2, [pc, #84]	@ (8000548 <M_GPIO_void_SetPinMode+0x2c8>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6053      	str	r3, [r2, #4]
                break;
 80004f6:	e07e      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            case PORTC_GPIO:
            	GPIO_C->GPIOx_CRH &= ~(0xf<<(4*Copy_u8PinNumber));
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	210f      	movs	r1, #15
 8000502:	fa01 f202 	lsl.w	r2, r1, r2
 8000506:	43d2      	mvns	r2, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a10      	ldr	r2, [pc, #64]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 800050c:	400b      	ands	r3, r1
 800050e:	6053      	str	r3, [r2, #4]
                GPIO_C->GPIOx_CRH |= (u32)(Copy_u8PinMode << (4*(Copy_u8PinNumber-8)));
 8000510:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	7979      	ldrb	r1, [r7, #5]
 8000516:	79ba      	ldrb	r2, [r7, #6]
 8000518:	3a08      	subs	r2, #8
 800051a:	0092      	lsls	r2, r2, #2
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 8000524:	430b      	orrs	r3, r1
 8000526:	6053      	str	r3, [r2, #4]
                GPIO_C->GPIOx_CRH |= (u32)(Copy_u8IOMode << (2+(4*(Copy_u8PinNumber-8))));
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	7939      	ldrb	r1, [r7, #4]
 800052e:	79ba      	ldrb	r2, [r7, #6]
 8000530:	3a08      	subs	r2, #8
 8000532:	0092      	lsls	r2, r2, #2
 8000534:	3202      	adds	r2, #2
 8000536:	fa01 f202 	lsl.w	r2, r1, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a03      	ldr	r2, [pc, #12]	@ (800054c <M_GPIO_void_SetPinMode+0x2cc>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6053      	str	r3, [r2, #4]
                break;
 8000542:	e058      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
 8000544:	40010800 	.word	0x40010800
 8000548:	40010c00 	.word	0x40010c00
 800054c:	40011000 	.word	0x40011000
 8000550:	40011400 	.word	0x40011400
 8000554:	40011800 	.word	0x40011800
            case PORTD_GPIO:
            	GPIO_D->GPIOx_CRH &= ~(0xf<<(4*Copy_u8PinNumber));
 8000558:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <M_GPIO_void_SetPinMode+0x380>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	79ba      	ldrb	r2, [r7, #6]
 800055e:	0092      	lsls	r2, r2, #2
 8000560:	210f      	movs	r1, #15
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	43d2      	mvns	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a25      	ldr	r2, [pc, #148]	@ (8000600 <M_GPIO_void_SetPinMode+0x380>)
 800056c:	400b      	ands	r3, r1
 800056e:	6053      	str	r3, [r2, #4]
                GPIO_D->GPIOx_CRH |= (u32)(Copy_u8PinMode << (4*(Copy_u8PinNumber-8)));
 8000570:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <M_GPIO_void_SetPinMode+0x380>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	7979      	ldrb	r1, [r7, #5]
 8000576:	79ba      	ldrb	r2, [r7, #6]
 8000578:	3a08      	subs	r2, #8
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	4611      	mov	r1, r2
 8000582:	4a1f      	ldr	r2, [pc, #124]	@ (8000600 <M_GPIO_void_SetPinMode+0x380>)
 8000584:	430b      	orrs	r3, r1
 8000586:	6053      	str	r3, [r2, #4]
                GPIO_D->GPIOx_CRH |= (u32)(Copy_u8IOMode << (2+(4*(Copy_u8PinNumber-8))));
 8000588:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <M_GPIO_void_SetPinMode+0x380>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	7939      	ldrb	r1, [r7, #4]
 800058e:	79ba      	ldrb	r2, [r7, #6]
 8000590:	3a08      	subs	r2, #8
 8000592:	0092      	lsls	r2, r2, #2
 8000594:	3202      	adds	r2, #2
 8000596:	fa01 f202 	lsl.w	r2, r1, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a18      	ldr	r2, [pc, #96]	@ (8000600 <M_GPIO_void_SetPinMode+0x380>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	6053      	str	r3, [r2, #4]
                break;
 80005a2:	e028      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            case PORTE_GPIO:
            	GPIO_E->GPIOx_CRH &= ~(0xf<<(4*Copy_u8PinNumber));
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <M_GPIO_void_SetPinMode+0x384>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	79ba      	ldrb	r2, [r7, #6]
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	210f      	movs	r1, #15
 80005ae:	fa01 f202 	lsl.w	r2, r1, r2
 80005b2:	43d2      	mvns	r2, r2
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a13      	ldr	r2, [pc, #76]	@ (8000604 <M_GPIO_void_SetPinMode+0x384>)
 80005b8:	400b      	ands	r3, r1
 80005ba:	6053      	str	r3, [r2, #4]
                GPIO_E->GPIOx_CRH |= (u32)(Copy_u8PinMode << (4*(Copy_u8PinNumber-8)));
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <M_GPIO_void_SetPinMode+0x384>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	7979      	ldrb	r1, [r7, #5]
 80005c2:	79ba      	ldrb	r2, [r7, #6]
 80005c4:	3a08      	subs	r2, #8
 80005c6:	0092      	lsls	r2, r2, #2
 80005c8:	fa01 f202 	lsl.w	r2, r1, r2
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <M_GPIO_void_SetPinMode+0x384>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	6053      	str	r3, [r2, #4]
                GPIO_E->GPIOx_CRH |= (u32)(Copy_u8IOMode << (2+(4*(Copy_u8PinNumber-8))));
 80005d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <M_GPIO_void_SetPinMode+0x384>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	7939      	ldrb	r1, [r7, #4]
 80005da:	79ba      	ldrb	r2, [r7, #6]
 80005dc:	3a08      	subs	r2, #8
 80005de:	0092      	lsls	r2, r2, #2
 80005e0:	3202      	adds	r2, #2
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <M_GPIO_void_SetPinMode+0x384>)
 80005ea:	430b      	orrs	r3, r1
 80005ec:	6053      	str	r3, [r2, #4]
                break;
 80005ee:	e002      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
                break;
 80005f0:	bf00      	nop
 80005f2:	e000      	b.n	80005f6 <M_GPIO_void_SetPinMode+0x376>
            default:
                break;
 80005f4:	bf00      	nop
    }
    else
    {
        // nothing
    }
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc90      	pop	{r4, r7}
 80005fe:	4770      	bx	lr
 8000600:	40011400 	.word	0x40011400
 8000604:	40011800 	.word	0x40011800

08000608 <M_RCC_Void_EnableClock>:
 * 
 */
#include "RCC_interface.h"

void M_RCC_Void_EnableClock(BusName_t Copy_BusType, u8 Copy_PrephralNumber)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]
    switch (Copy_BusType)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d01a      	beq.n	8000654 <M_RCC_Void_EnableClock+0x4c>
 800061e:	2b02      	cmp	r3, #2
 8000620:	dc22      	bgt.n	8000668 <M_RCC_Void_EnableClock+0x60>
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <M_RCC_Void_EnableClock+0x24>
 8000626:	2b01      	cmp	r3, #1
 8000628:	d00a      	beq.n	8000640 <M_RCC_Void_EnableClock+0x38>
            break;
        case APB2:     
        	__SET_BIT(RCC_APB2ENR, Copy_PrephralNumber);
            break;
        default:   /* error */
            break;
 800062a:	e01d      	b.n	8000668 <M_RCC_Void_EnableClock+0x60>
            __SET_BIT(RCC_AHBENR, Copy_PrephralNumber);
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <M_RCC_Void_EnableClock+0x6c>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	490e      	ldr	r1, [pc, #56]	@ (8000674 <M_RCC_Void_EnableClock+0x6c>)
 800063a:	4313      	orrs	r3, r2
 800063c:	600b      	str	r3, [r1, #0]
            break;
 800063e:	e014      	b.n	800066a <M_RCC_Void_EnableClock+0x62>
        	__SET_BIT(RCC_APB1ENR, Copy_PrephralNumber);
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <M_RCC_Void_EnableClock+0x70>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2101      	movs	r1, #1
 8000648:	fa01 f303 	lsl.w	r3, r1, r3
 800064c:	490a      	ldr	r1, [pc, #40]	@ (8000678 <M_RCC_Void_EnableClock+0x70>)
 800064e:	4313      	orrs	r3, r2
 8000650:	600b      	str	r3, [r1, #0]
            break;
 8000652:	e00a      	b.n	800066a <M_RCC_Void_EnableClock+0x62>
        	__SET_BIT(RCC_APB2ENR, Copy_PrephralNumber);
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <M_RCC_Void_EnableClock+0x74>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	2101      	movs	r1, #1
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	4906      	ldr	r1, [pc, #24]	@ (800067c <M_RCC_Void_EnableClock+0x74>)
 8000662:	4313      	orrs	r3, r2
 8000664:	600b      	str	r3, [r1, #0]
            break;
 8000666:	e000      	b.n	800066a <M_RCC_Void_EnableClock+0x62>
            break;
 8000668:	bf00      	nop
    }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021014 	.word	0x40021014
 8000678:	4002101c 	.word	0x4002101c
 800067c:	40021018 	.word	0x40021018

08000680 <M_RCC_Void_ClkSourceInit>:
	__CLR_BIT(RCC_CR, CSSON);
}


void M_RCC_Void_ClkSourceInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
        __SET_BIT(__RCC->CR, HSION);   // enable HSI
        while(__GET_BIT(__RCC->CR, HSIRDY) == 0);     // polling while HSE Frequance is stable
        __CLR_BIT(__RCC->CFGR,SW0);
        __CLR_BIT(__RCC->CFGR,SW1);
    #elif   CLK_SOURCE      ==     RCC_HSE
        __SET_BIT(__RCC->CR, HSEON);   // enable HSE
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a10      	ldr	r2, [pc, #64]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 800068a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800068e:	6013      	str	r3, [r2, #0]
        while(__GET_BIT(__RCC->CR, HSERDY) == 0);     // polling while HSE Frequance is stable
 8000690:	bf00      	nop
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0f9      	beq.n	8000692 <M_RCC_Void_ClkSourceInit+0x12>
        #if       HSE_SOURCE    ==    HSE_Crystal   
        __CLR_BIT(__RCC->CR,HSEBYP);   // disable bypasse mode
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 80006a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006a8:	6013      	str	r3, [r2, #0]
        #elif     HSE_SOURCE    ==    HSE_RC 
            __SET_BIT(__RCC->CR,HSEBYP);      // enalbe bypasse mode
        #endif
        /* select HSE as system clock */
            __SET_BIT(__RCC->CFGR,SW0);
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6053      	str	r3, [r2, #4]
            __CLR_BIT(__RCC->CFGR,SW1);
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4a04      	ldr	r2, [pc, #16]	@ (80006cc <M_RCC_Void_ClkSourceInit+0x4c>)
 80006bc:	f023 0302 	bic.w	r3, r3, #2
 80006c0:	6053      	str	r3, [r2, #4]
        __SET_BIT(__RCC->CR, HSION);   // enable HSI
        __CLR_BIT(__RCC->CFGR, PLL_SRC);    // choose HSI input on PLL
        #endif
            __RCC->CFGR |= (PLL_MUL<<18);
    #endif
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db0b      	blt.n	80006fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 021f 	and.w	r2, r3, #31
 80006e8:	4906      	ldr	r1, [pc, #24]	@ (8000704 <__NVIC_EnableIRQ+0x34>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	2001      	movs	r0, #1
 80006f2:	fa00 f202 	lsl.w	r2, r0, r2
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	@ (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	@ (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <main>:
  */

void App_void_ToggleLed(void);

int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 f8ec 	bl	800093c <HAL_Init>
  /* Configure the system clock */
  //SystemClock_Config();
  M_RCC_Void_ClkSourceInit();
 8000764:	f7ff ff8c 	bl	8000680 <M_RCC_Void_ClkSourceInit>
  M_RCC_Void_EnableClock(APB2,AFIOEN);
 8000768:	2100      	movs	r1, #0
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff4c 	bl	8000608 <M_RCC_Void_EnableClock>
  M_RCC_Void_EnableClock(APB2,IOPAEN);
 8000770:	2102      	movs	r1, #2
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff ff48 	bl	8000608 <M_RCC_Void_EnableClock>
  //MX_GPIO_Init();
  //M_GPIO_void_SetPinMode(PORTA_GPIO, 1, INPUT, INPUT_PULL_UP_DOWN);              // input
  //M_GPIO_void_InputPullUp_PullDown(PORTA_GPIO,1,PULL_UP);
  M_GPIO_void_SetPinMode(PORTA_GPIO, 4, OUTPUT_MAX_SPEED_10MHZ, GPO_PUSH_PULL);  // output
 8000778:	2300      	movs	r3, #0
 800077a:	2201      	movs	r2, #1
 800077c:	2104      	movs	r1, #4
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff fd7e 	bl	8000280 <M_GPIO_void_SetPinMode>


  /*  EXTI initialization */
 // M_EXTI_void_SelectExtPin(PORTA_GPIO,1);
  M_EXTI_void_EnableLine(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fce1 	bl	800014c <M_EXTI_void_EnableLine>
  M_EXTI_void_EventType(1, __RISING_EDGE__);
 800078a:	2100      	movs	r1, #0
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff fcf3 	bl	8000178 <M_EXTI_void_EventType>
  M_EXTI_void_SetCallBack(App_void_ToggleLed);
 8000792:	4807      	ldr	r0, [pc, #28]	@ (80007b0 <main+0x54>)
 8000794:	f7ff fd5c 	bl	8000250 <M_EXTI_void_SetCallBack>
   /*  NVIC initialization */
  NVIC_SetPriority(EXTI1_IRQn, 1);
 8000798:	2101      	movs	r1, #1
 800079a:	2007      	movs	r0, #7
 800079c:	f7ff ffb4 	bl	8000708 <__NVIC_SetPriority>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80007a0:	b662      	cpsie	i
}
 80007a2:	bf00      	nop
  __enable_irq();    // enable interrupt for primaske register
  NVIC_EnableIRQ(EXTI1_IRQn);
 80007a4:	2007      	movs	r0, #7
 80007a6:	f7ff ff93 	bl	80006d0 <__NVIC_EnableIRQ>

  while(1)
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <main+0x4e>
 80007ae:	bf00      	nop
 80007b0:	080007b5 	.word	0x080007b5

080007b4 <App_void_ToggleLed>:

  }
}

void App_void_ToggleLed(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0


	if(__GET_BIT(__EXTIR->EXTI_PR_REG,1))
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <App_void_ToggleLed+0x64>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d024      	beq.n	8000810 <App_void_ToggleLed+0x5c>
	{
		DELAY_MS(140);
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e00f      	b.n	80007ec <App_void_ToggleLed+0x38>
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <App_void_ToggleLed+0x68>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	f641 733c 	movw	r3, #7996	@ 0x1f3c
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <App_void_ToggleLed+0x68>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	68ba      	ldr	r2, [r7, #8]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d8f8      	bhi.n	80007d8 <App_void_ToggleLed+0x24>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3301      	adds	r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2b8b      	cmp	r3, #139	@ 0x8b
 80007f0:	d9ec      	bls.n	80007cc <App_void_ToggleLed+0x18>
		if(__GET_BIT(__EXTIR->EXTI_PR_REG,1))
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <App_void_ToggleLed+0x64>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d008      	beq.n	8000810 <App_void_ToggleLed+0x5c>
		{
			((GPIO_A->GPIOx_ODR) ^=  (1U << 4));
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <App_void_ToggleLed+0x6c>)
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <App_void_ToggleLed+0x6c>)
 8000804:	f083 0310 	eor.w	r3, r3, #16
 8000808:	60d3      	str	r3, [r2, #12]
			M_EXTI_void_ClearSWT(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fd0a 	bl	8000224 <M_EXTI_void_ClearSWT>

		}
	}

}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40010400 	.word	0x40010400
 800081c:	e000e010 	.word	0xe000e010
 8000820:	40010800 	.word	0x40010800

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <HAL_MspInit+0x5c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a14      	ldr	r2, [pc, #80]	@ (8000880 <HAL_MspInit+0x5c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <HAL_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0e      	ldr	r2, [pc, #56]	@ (8000880 <HAL_MspInit+0x5c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <HAL_MspInit+0x60>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <HAL_MspInit+0x60>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800088c:	f000 f992 	bl	8000bb4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <NMI_Handler+0x8>

08000894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <MemManage_Handler+0x4>

080008a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f874 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f0:	f7ff fff8 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480b      	ldr	r0, [pc, #44]	@ (8000924 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008f6:	490c      	ldr	r1, [pc, #48]	@ (8000928 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f8:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800090c:	4c09      	ldr	r4, [pc, #36]	@ (8000934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f000 f965 	bl	8000be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff ff1d 	bl	800075c <main>
  bx lr
 8000922:	4770      	bx	lr
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800092c:	08000c50 	.word	0x08000c50
  ldr r2, =_sbss
 8000930:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000934:	20000030 	.word	0x20000030

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f8fd 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff ff64 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f907 	bl	8000b9a <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f8dd 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a03      	ldr	r2, [pc, #12]	@ (80009e8 <HAL_IncTick+0x20>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000008 	.word	0x20000008
 80009e8:	2000002c 	.word	0x2000002c

080009ec <__NVIC_SetPriorityGrouping>:
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_SetPriority>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	@ (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	@ (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	@ 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	@ 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff90 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff49 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff5e 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff90 	bl	8000aa4 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5f 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffb0 	bl	8000b08 <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc0:	2b80      	cmp	r3, #128	@ 0x80
 8000bc2:	d104      	bne.n	8000bce <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8000bc4:	f000 f80a 	bl	8000bdc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	701a      	strb	r2, [r3, #0]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	4002100a 	.word	0x4002100a

08000bdc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <__libc_init_array>:
 8000be8:	b570      	push	{r4, r5, r6, lr}
 8000bea:	2600      	movs	r6, #0
 8000bec:	4d0c      	ldr	r5, [pc, #48]	@ (8000c20 <__libc_init_array+0x38>)
 8000bee:	4c0d      	ldr	r4, [pc, #52]	@ (8000c24 <__libc_init_array+0x3c>)
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	10a4      	asrs	r4, r4, #2
 8000bf4:	42a6      	cmp	r6, r4
 8000bf6:	d109      	bne.n	8000c0c <__libc_init_array+0x24>
 8000bf8:	f000 f81a 	bl	8000c30 <_init>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	4d0a      	ldr	r5, [pc, #40]	@ (8000c28 <__libc_init_array+0x40>)
 8000c00:	4c0a      	ldr	r4, [pc, #40]	@ (8000c2c <__libc_init_array+0x44>)
 8000c02:	1b64      	subs	r4, r4, r5
 8000c04:	10a4      	asrs	r4, r4, #2
 8000c06:	42a6      	cmp	r6, r4
 8000c08:	d105      	bne.n	8000c16 <__libc_init_array+0x2e>
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
 8000c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c10:	4798      	blx	r3
 8000c12:	3601      	adds	r6, #1
 8000c14:	e7ee      	b.n	8000bf4 <__libc_init_array+0xc>
 8000c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c1a:	4798      	blx	r3
 8000c1c:	3601      	adds	r6, #1
 8000c1e:	e7f2      	b.n	8000c06 <__libc_init_array+0x1e>
 8000c20:	08000c48 	.word	0x08000c48
 8000c24:	08000c48 	.word	0x08000c48
 8000c28:	08000c48 	.word	0x08000c48
 8000c2c:	08000c4c 	.word	0x08000c4c

08000c30 <_init>:
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	bf00      	nop
 8000c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c36:	bc08      	pop	{r3}
 8000c38:	469e      	mov	lr, r3
 8000c3a:	4770      	bx	lr

08000c3c <_fini>:
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	bf00      	nop
 8000c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c42:	bc08      	pop	{r3}
 8000c44:	469e      	mov	lr, r3
 8000c46:	4770      	bx	lr
